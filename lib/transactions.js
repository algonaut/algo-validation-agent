"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.payment = payment;
exports.close = close;
exports.registerKeyOnline = registerKeyOnline;
exports.registerKeyOffline = registerKeyOffline;
exports.assetCreate = assetCreate;
exports.assetConfigure = assetConfigure;
exports.assetDestroy = assetDestroy;
exports.assetOptIn = assetOptIn;
exports.assetTransfer = assetTransfer;
exports.assetRevoke = assetRevoke;
exports.assetFreeze = assetFreeze;
exports["default"] = void 0;

var _v8n = _interopRequireDefault(require("v8n"));

var _rules = _interopRequireDefault(require("./rules"));

var _constants = require("./utils/constants");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// Fields that are optional for any txn
var TXN_OPTIONAL_FIELDS = {
  genesisID: (0, _v8n["default"])().optional(_rules["default"].genesisID),
  fee: (0, _v8n["default"])().optional(_rules["default"].fee),
  note: (0, _v8n["default"])().optional(_rules["default"].note),
  lease: (0, _v8n["default"])().optional(_rules["default"].lease),
  group: (0, _v8n["default"])().optional(_rules["default"].group),
  reKeyTo: (0, _v8n["default"])().optional(_rules["default"].algoAddress)
}; // Fields required for any txn

var TXN_REQUIRED_FIELDS = {
  firstRound: _rules["default"].firstRound,
  lastRound: _rules["default"].lastRound,
  genesisHash: _rules["default"].genesisHash
}; // Standard checks for all transactions

function standardTxnValidation(txn) {
  var roundsValid = txn.lastRound > txn.firstRound;
  return roundsValid;
}
/**
 * Test for a valid payment transaction payload
 * @category Transactions
 * @param {object}
 * @returns {boolean}
 */


function payment(txn) {
  var PAY_TXN_SCHEMA = (0, _v8n["default"])().schema(_objectSpread({
    to: (0, _v8n["default"])().optional(_rules["default"].algoAddress),
    amount: (0, _v8n["default"])().optional(_rules["default"].amount),
    from: _rules["default"].algoAddress,
    type: (0, _v8n["default"])().string().exact(_constants.TRANSACTION_TYPES.PAY)
  }, TXN_REQUIRED_FIELDS, {}, TXN_OPTIONAL_FIELDS));
  return PAY_TXN_SCHEMA.test(txn) && standardTxnValidation(txn);
}
/**
 * Test for a valid close account transaction payload
 * @category Transactions
 * @param {object}
 * @returns {boolean}
 */


function close(txn) {
  var CLOSE_TXN_SCHEMA = (0, _v8n["default"])().schema(_objectSpread({
    closeRemainderTo: _rules["default"].algoAddress,
    from: _rules["default"].algoAddress,
    to: _rules["default"].algoAddress,
    type: (0, _v8n["default"])().string().exact(_constants.TRANSACTION_TYPES.PAY)
  }, TXN_REQUIRED_FIELDS, {}, TXN_OPTIONAL_FIELDS)); // No closing and sending from the same address

  var isNotSameAddress = txn.closeRemainderTo !== txn.from;
  return CLOSE_TXN_SCHEMA.test(txn) && standardTxnValidation(txn) && isNotSameAddress;
}
/**
 * Test for a valid online key registration transaction payload
 * @category Transactions
 * @param {object}
 * @returns {boolean}
 */


function registerKeyOnline(txn) {
  var isValid = (0, _v8n["default"])().schema(_objectSpread({
    selectionKey: _rules["default"].selectionKey,
    from: _rules["default"].algoAddress,
    voteFirst: _rules["default"].voteFirst,
    voteKeyDilution: _rules["default"].voteKeyDilution,
    voteKey: _rules["default"].voteKey,
    voteLast: _rules["default"].voteLast,
    type: (0, _v8n["default"])().string().exact(_constants.TRANSACTION_TYPES.KEYREG)
  }, TXN_REQUIRED_FIELDS, {}, TXN_OPTIONAL_FIELDS)); // Vote first must be less than vote last

  var isNotSameAddress = txn.voteFirst < txn.voteLast;
  return isValid.test(txn) && standardTxnValidation(txn);
}
/**
 * Test for a valid offline key registration transaction payload
 * @category Transactions
 * @param {object}
 * @returns {boolean}
 */


function registerKeyOffline(txn) {
  var isValid = (0, _v8n["default"])().schema(_objectSpread({
    from: _rules["default"].algoAddress,
    type: (0, _v8n["default"])().string().exact(_constants.TRANSACTION_TYPES.KEYREG)
  }, TXN_REQUIRED_FIELDS, {}, TXN_OPTIONAL_FIELDS));
  return isValid.test(txn) && standardTxnValidation(txn);
}
/**
 * Test for a valid asset creation transaction payload
 * @category Transactions
 * @param {object}
 * @returns {boolean}
 */


function assetCreate(txn) {
  var isValid = (0, _v8n["default"])().schema(_objectSpread({
    assetMetadataHash: (0, _v8n["default"])().string(),
    assetName: _rules["default"].assetName,
    assetURL: _rules["default"].assetURL,
    assetClawback: _rules["default"].algoAddress,
    assetDecimals: _rules["default"].assetDecimals,
    assetFreeze: _rules["default"].algoAddress,
    assetManager: _rules["default"].algoAddress,
    assetReserve: _rules["default"].algoAddress,
    assetTotal: _rules["default"].assetTotal,
    assetUnitName: _rules["default"].assetUnitName,
    from: _rules["default"].algoAddress,
    type: (0, _v8n["default"])().string().exact(_constants.TRANSACTION_TYPES.ACFG)
  }, TXN_REQUIRED_FIELDS, {}, TXN_OPTIONAL_FIELDS));
  return isValid.test(txn) && standardTxnValidation(txn);
}
/**
 * Test for a valid asset configuration transaction payload
 * @category Transactions
 * @param {object}
 * @returns {boolean}
 */


function assetConfigure(txn) {
  var isValid = (0, _v8n["default"])().schema(_objectSpread({
    assetClawback: _rules["default"].algoAddress,
    assetFreeze: _rules["default"].algoAddress,
    assetManager: _rules["default"].algoAddress,
    assetReserve: _rules["default"].algoAddress,
    assetIndex: _rules["default"].assetIndex,
    from: _rules["default"].algoAddress,
    type: (0, _v8n["default"])().string().exact(_constants.TRANSACTION_TYPES.ACFG)
  }, TXN_REQUIRED_FIELDS, {}, TXN_OPTIONAL_FIELDS));
  return isValid.test(txn) && standardTxnValidation(txn);
}
/**
 * Test for a valid asset destroy transaction payload
 * @category Transactions
 * @param {object}
 * @returns {boolean}
 */


function assetDestroy(txn) {
  var isValid = (0, _v8n["default"])().schema(_objectSpread({
    assetIndex: _rules["default"].assetIndex,
    from: _rules["default"].algoAddress,
    type: (0, _v8n["default"])().string().exact(_constants.TRANSACTION_TYPES.ACFG)
  }, TXN_REQUIRED_FIELDS, {}, TXN_OPTIONAL_FIELDS));
  return isValid.test(txn) && standardTxnValidation(txn);
}
/**
 * Test for a valid asset opt-in transaction payload
 * @category Transactions
 * @param {object}
 * @returns {boolean}
 */


function assetOptIn(txn) {
  var isValid = (0, _v8n["default"])().schema(_objectSpread({
    to: _rules["default"].algoAddress,
    from: _rules["default"].algoAddress,
    type: (0, _v8n["default"])().string().exact(_constants.TRANSACTION_TYPES.AXFER),
    assetIndex: _rules["default"].assetIndex
  }, TXN_REQUIRED_FIELDS, {}, TXN_OPTIONAL_FIELDS));
  return isValid.test(txn) && standardTxnValidation(txn);
}
/**
 * Test for a valid asset transfer transaction payload
 * @category Transactions
 * @param {object}
 * @returns {boolean}
 */


function assetTransfer(txn) {
  var isValid = (0, _v8n["default"])().schema(_objectSpread({
    amount: _rules["default"].amount,
    to: _rules["default"].algoAddress,
    from: _rules["default"].algoAddress,
    assetIndex: _rules["default"].assetIndex,
    type: (0, _v8n["default"])().string().exact(_constants.TRANSACTION_TYPES.AXFER)
  }, TXN_REQUIRED_FIELDS, {}, TXN_OPTIONAL_FIELDS));
  return isValid.test(txn) && standardTxnValidation(txn);
}
/**
 * Test for a valid revoke asset transaction payload
 * @category Transactions
 * @param {object}
 * @returns {boolean}
 */


function assetRevoke(txn) {
  var isValid = (0, _v8n["default"])().schema(_objectSpread({
    amount: _rules["default"].amount,
    to: _rules["default"].algoAddress,
    assetRevocationTarget: _rules["default"].algoAddress,
    from: _rules["default"].algoAddress,
    assetIndex: _rules["default"].assetIndex,
    type: (0, _v8n["default"])().string().exact(_constants.TRANSACTION_TYPES.AXFER)
  }, TXN_REQUIRED_FIELDS, {}, TXN_OPTIONAL_FIELDS));
  return isValid.test(txn) && standardTxnValidation(txn);
}
/**
 * Test for a valid freeze asset transaction payload
 * @category Transactions
 * @param {object}
 * @returns {boolean}
 */


function assetFreeze(txn) {
  var isValid = (0, _v8n["default"])().schema(_objectSpread({
    freezeState: _rules["default"].freezeState,
    freezeAccount: _rules["default"].algoAddress,
    assetIndex: _rules["default"].assetIndex,
    from: _rules["default"].algoAddress,
    type: (0, _v8n["default"])().string().exact(_constants.TRANSACTION_TYPES.AFRZ)
  }, TXN_REQUIRED_FIELDS, {}, TXN_OPTIONAL_FIELDS));
  return isValid.test(txn) && standardTxnValidation(txn);
}

var _default = {
  payment: payment,
  close: close,
  registerKeyOnline: registerKeyOnline,
  registerKeyOffline: registerKeyOffline,
  assetCreate: assetCreate,
  assetConfigure: assetConfigure,
  assetDestroy: assetDestroy,
  assetOptIn: assetOptIn,
  assetTransfer: assetTransfer,
  assetRevoke: assetRevoke,
  assetFreeze: assetFreeze
};
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,