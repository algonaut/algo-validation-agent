"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isAlgorandAddress = isAlgorandAddress;
exports.isTransactionId = isTransactionId;
exports.isAssetIndex = isAssetIndex;
exports.isTransactionPayload = isTransactionPayload;
exports["default"] = exports.assetConfigureParams = exports.assetCreateParams = exports.assetIndex = exports.algoTxn = exports.algoAddress = void 0;

var _v8n = _interopRequireDefault(require("v8n"));

var _extensions = require("./utils/extensions");

var _constants = require("./utils/constants");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

// For full typing support on the extend function,
// v8n should use context instead of a global variable
// Details: https://github.com/imbrn/v8n/issues/28
// @ts-ignore
_v8n["default"].extend({
  exactByteLength: _extensions.exactByteLength,
  base32CharsOnly: _extensions.base32CharsOnly
});

var algoAddress = (0, _v8n["default"])().string().exactByteLength(_constants.ALGORAND_ADDRESS_LENGTH).length(_constants.ALGORAND_ADDRESS_LENGTH).base32CharsOnly();
exports.algoAddress = algoAddress;
var algoTxn = (0, _v8n["default"])().string().exactByteLength(_constants.ALGORAND_TRANSACTION_LENGTH).length(_constants.ALGORAND_TRANSACTION_LENGTH).base32CharsOnly();
exports.algoTxn = algoTxn;
var assetIndex = (0, _v8n["default"])().number().positive().lessThanOrEqual(Number.MAX_SAFE_INTEGER);
exports.assetIndex = assetIndex;
var assetCreateParams = (0, _v8n["default"])().schema({
  am: (0, _v8n["default"])().string(),
  an: (0, _v8n["default"])().string(),
  au: (0, _v8n["default"])().string(),
  c: algoAddress,
  dc: (0, _v8n["default"])().integer(),
  f: algoAddress,
  m: algoAddress,
  r: algoAddress,
  t: (0, _v8n["default"])().integer(),
  un: (0, _v8n["default"])().string()
});
exports.assetCreateParams = assetCreateParams;
var assetConfigureParams = (0, _v8n["default"])().schema({
  c: algoAddress,
  f: algoAddress,
  m: algoAddress,
  r: algoAddress
});
/**
 * Test a string for valid Algorand address requirements
 * @category Core
 * @param {string}
 * @returns {boolean}
 */

exports.assetConfigureParams = assetConfigureParams;

function isAlgorandAddress(input) {
  return algoAddress.test(input);
}
/**
 * Test for a valid Algorand transaction ID
 * @category Core
 * @param {string}
 * @returns {boolean}
 */


function isTransactionId(txId) {
  return algoTxn.test(txId);
}
/**
 * Test for a valid Algorand asset index
 * @category Core
 * @param {number}
 * @returns {boolean}
 */


function isAssetIndex(assetId) {
  return assetIndex.test(assetId);
}
/**
 * Test for basic valid Algorand transaction payload shape
 * @category Core
 * @param {object}
 * @returns {boolean}
 */


function isTransactionPayload(txnPayload) {
  var isTxn = (0, _v8n["default"])().schema({
    txn: (0, _v8n["default"])().object()
  });
  return isTxn.test(txnPayload);
}

var _default = {
  assetIndex: assetIndex,
  algoAddress: algoAddress,
  algoTxn: algoTxn,
  assetCreateParams: assetCreateParams,
  assetConfigureParams: assetConfigureParams,
  isAlgorandAddress: isAlgorandAddress,
  isTransactionId: isTransactionId,
  isAssetIndex: isAssetIndex,
  isTransactionPayload: isTransactionPayload
};
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9jb3JlLnRzIl0sIm5hbWVzIjpbInY4biIsImV4dGVuZCIsImV4YWN0Qnl0ZUxlbmd0aCIsImJhc2UzMkNoYXJzT25seSIsImFsZ29BZGRyZXNzIiwic3RyaW5nIiwiQUxHT1JBTkRfQUREUkVTU19MRU5HVEgiLCJsZW5ndGgiLCJhbGdvVHhuIiwiQUxHT1JBTkRfVFJBTlNBQ1RJT05fTEVOR1RIIiwiYXNzZXRJbmRleCIsIm51bWJlciIsInBvc2l0aXZlIiwibGVzc1RoYW5PckVxdWFsIiwiTnVtYmVyIiwiTUFYX1NBRkVfSU5URUdFUiIsImFzc2V0Q3JlYXRlUGFyYW1zIiwic2NoZW1hIiwiYW0iLCJhbiIsImF1IiwiYyIsImRjIiwiaW50ZWdlciIsImYiLCJtIiwiciIsInQiLCJ1biIsImFzc2V0Q29uZmlndXJlUGFyYW1zIiwiaXNBbGdvcmFuZEFkZHJlc3MiLCJpbnB1dCIsInRlc3QiLCJpc1RyYW5zYWN0aW9uSWQiLCJ0eElkIiwiaXNBc3NldEluZGV4IiwiYXNzZXRJZCIsImlzVHJhbnNhY3Rpb25QYXlsb2FkIiwidHhuUGF5bG9hZCIsImlzVHhuIiwidHhuIiwib2JqZWN0Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOzs7O0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQUEsZ0JBQUlDLE1BQUosQ0FBVztBQUFFQyxFQUFBQSxlQUFlLEVBQWZBLDJCQUFGO0FBQW1CQyxFQUFBQSxlQUFlLEVBQWZBO0FBQW5CLENBQVg7O0FBRU8sSUFBTUMsV0FBVyxHQUFHLHVCQUN4QkMsTUFEd0IsR0FFeEJILGVBRndCLENBRVJJLGtDQUZRLEVBR3hCQyxNQUh3QixDQUdqQkQsa0NBSGlCLEVBSXhCSCxlQUp3QixFQUFwQjs7QUFNQSxJQUFNSyxPQUFPLEdBQUcsdUJBQ3BCSCxNQURvQixHQUVwQkgsZUFGb0IsQ0FFSk8sc0NBRkksRUFHcEJGLE1BSG9CLENBR2JFLHNDQUhhLEVBSXBCTixlQUpvQixFQUFoQjs7QUFNQSxJQUFNTyxVQUFVLEdBQUcsdUJBQ3ZCQyxNQUR1QixHQUV2QkMsUUFGdUIsR0FHdkJDLGVBSHVCLENBR1BDLE1BQU0sQ0FBQ0MsZ0JBSEEsQ0FBbkI7O0FBS0EsSUFBTUMsaUJBQWlCLEdBQUcsdUJBQU1DLE1BQU4sQ0FBYTtBQUM1Q0MsRUFBQUEsRUFBRSxFQUFFLHVCQUFNYixNQUFOLEVBRHdDO0FBRTVDYyxFQUFBQSxFQUFFLEVBQUUsdUJBQU1kLE1BQU4sRUFGd0M7QUFHNUNlLEVBQUFBLEVBQUUsRUFBRSx1QkFBTWYsTUFBTixFQUh3QztBQUk1Q2dCLEVBQUFBLENBQUMsRUFBRWpCLFdBSnlDO0FBSzVDa0IsRUFBQUEsRUFBRSxFQUFFLHVCQUFNQyxPQUFOLEVBTHdDO0FBTTVDQyxFQUFBQSxDQUFDLEVBQUVwQixXQU55QztBQU81Q3FCLEVBQUFBLENBQUMsRUFBRXJCLFdBUHlDO0FBUTVDc0IsRUFBQUEsQ0FBQyxFQUFFdEIsV0FSeUM7QUFTNUN1QixFQUFBQSxDQUFDLEVBQUUsdUJBQU1KLE9BQU4sRUFUeUM7QUFVNUNLLEVBQUFBLEVBQUUsRUFBRSx1QkFBTXZCLE1BQU47QUFWd0MsQ0FBYixDQUExQjs7QUFhQSxJQUFNd0Isb0JBQW9CLEdBQUcsdUJBQU1aLE1BQU4sQ0FBYTtBQUMvQ0ksRUFBQUEsQ0FBQyxFQUFFakIsV0FENEM7QUFFL0NvQixFQUFBQSxDQUFDLEVBQUVwQixXQUY0QztBQUcvQ3FCLEVBQUFBLENBQUMsRUFBRXJCLFdBSDRDO0FBSS9Dc0IsRUFBQUEsQ0FBQyxFQUFFdEI7QUFKNEMsQ0FBYixDQUE3QjtBQU9QOzs7Ozs7Ozs7QUFNTyxTQUFTMEIsaUJBQVQsQ0FBMkJDLEtBQTNCLEVBQTBDO0FBQy9DLFNBQU8zQixXQUFXLENBQUM0QixJQUFaLENBQWlCRCxLQUFqQixDQUFQO0FBQ0Q7QUFFRDs7Ozs7Ozs7QUFNTyxTQUFTRSxlQUFULENBQXlCQyxJQUF6QixFQUF1QztBQUM1QyxTQUFPMUIsT0FBTyxDQUFDd0IsSUFBUixDQUFhRSxJQUFiLENBQVA7QUFDRDtBQUVEOzs7Ozs7OztBQU1PLFNBQVNDLFlBQVQsQ0FBc0JDLE9BQXRCLEVBQXVDO0FBQzVDLFNBQU8xQixVQUFVLENBQUNzQixJQUFYLENBQWdCSSxPQUFoQixDQUFQO0FBQ0Q7QUFFRDs7Ozs7Ozs7QUFNTyxTQUFTQyxvQkFBVCxDQUE4QkMsVUFBOUIsRUFBa0Q7QUFDdkQsTUFBTUMsS0FBSyxHQUFHLHVCQUFNdEIsTUFBTixDQUFhO0FBQ3pCdUIsSUFBQUEsR0FBRyxFQUFFLHVCQUFNQyxNQUFOO0FBRG9CLEdBQWIsQ0FBZDtBQUdBLFNBQU9GLEtBQUssQ0FBQ1AsSUFBTixDQUFXTSxVQUFYLENBQVA7QUFDRDs7ZUFFYztBQUNiNUIsRUFBQUEsVUFBVSxFQUFWQSxVQURhO0FBRWJOLEVBQUFBLFdBQVcsRUFBWEEsV0FGYTtBQUdiSSxFQUFBQSxPQUFPLEVBQVBBLE9BSGE7QUFJYlEsRUFBQUEsaUJBQWlCLEVBQWpCQSxpQkFKYTtBQUtiYSxFQUFBQSxvQkFBb0IsRUFBcEJBLG9CQUxhO0FBTWJDLEVBQUFBLGlCQUFpQixFQUFqQkEsaUJBTmE7QUFPYkcsRUFBQUEsZUFBZSxFQUFmQSxlQVBhO0FBUWJFLEVBQUFBLFlBQVksRUFBWkEsWUFSYTtBQVNiRSxFQUFBQSxvQkFBb0IsRUFBcEJBO0FBVGEsQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB2OG4gZnJvbSAndjhuJztcbmltcG9ydCB7IGV4YWN0Qnl0ZUxlbmd0aCwgYmFzZTMyQ2hhcnNPbmx5IH0gZnJvbSAnLi91dGlscy9leHRlbnNpb25zJztcbmltcG9ydCB7XG4gIEFMR09SQU5EX0FERFJFU1NfTEVOR1RILFxuICBBTEdPUkFORF9UUkFOU0FDVElPTl9MRU5HVEhcbn0gZnJvbSAnLi91dGlscy9jb25zdGFudHMnO1xuXG4vLyBGb3IgZnVsbCB0eXBpbmcgc3VwcG9ydCBvbiB0aGUgZXh0ZW5kIGZ1bmN0aW9uLFxuLy8gdjhuIHNob3VsZCB1c2UgY29udGV4dCBpbnN0ZWFkIG9mIGEgZ2xvYmFsIHZhcmlhYmxlXG4vLyBEZXRhaWxzOiBodHRwczovL2dpdGh1Yi5jb20vaW1icm4vdjhuL2lzc3Vlcy8yOFxuLy8gQHRzLWlnbm9yZVxudjhuLmV4dGVuZCh7IGV4YWN0Qnl0ZUxlbmd0aCwgYmFzZTMyQ2hhcnNPbmx5IH0pO1xuXG5leHBvcnQgY29uc3QgYWxnb0FkZHJlc3MgPSB2OG4oKVxuICAuc3RyaW5nKClcbiAgLmV4YWN0Qnl0ZUxlbmd0aChBTEdPUkFORF9BRERSRVNTX0xFTkdUSClcbiAgLmxlbmd0aChBTEdPUkFORF9BRERSRVNTX0xFTkdUSClcbiAgLmJhc2UzMkNoYXJzT25seSgpO1xuXG5leHBvcnQgY29uc3QgYWxnb1R4biA9IHY4bigpXG4gIC5zdHJpbmcoKVxuICAuZXhhY3RCeXRlTGVuZ3RoKEFMR09SQU5EX1RSQU5TQUNUSU9OX0xFTkdUSClcbiAgLmxlbmd0aChBTEdPUkFORF9UUkFOU0FDVElPTl9MRU5HVEgpXG4gIC5iYXNlMzJDaGFyc09ubHkoKTtcblxuZXhwb3J0IGNvbnN0IGFzc2V0SW5kZXggPSB2OG4oKVxuICAubnVtYmVyKClcbiAgLnBvc2l0aXZlKClcbiAgLmxlc3NUaGFuT3JFcXVhbChOdW1iZXIuTUFYX1NBRkVfSU5URUdFUik7XG5cbmV4cG9ydCBjb25zdCBhc3NldENyZWF0ZVBhcmFtcyA9IHY4bigpLnNjaGVtYSh7XG4gIGFtOiB2OG4oKS5zdHJpbmcoKSxcbiAgYW46IHY4bigpLnN0cmluZygpLFxuICBhdTogdjhuKCkuc3RyaW5nKCksXG4gIGM6IGFsZ29BZGRyZXNzLFxuICBkYzogdjhuKCkuaW50ZWdlcigpLFxuICBmOiBhbGdvQWRkcmVzcyxcbiAgbTogYWxnb0FkZHJlc3MsXG4gIHI6IGFsZ29BZGRyZXNzLFxuICB0OiB2OG4oKS5pbnRlZ2VyKCksXG4gIHVuOiB2OG4oKS5zdHJpbmcoKVxufSk7XG5cbmV4cG9ydCBjb25zdCBhc3NldENvbmZpZ3VyZVBhcmFtcyA9IHY4bigpLnNjaGVtYSh7XG4gIGM6IGFsZ29BZGRyZXNzLFxuICBmOiBhbGdvQWRkcmVzcyxcbiAgbTogYWxnb0FkZHJlc3MsXG4gIHI6IGFsZ29BZGRyZXNzXG59KTtcblxuLyoqXG4gKiBUZXN0IGEgc3RyaW5nIGZvciB2YWxpZCBBbGdvcmFuZCBhZGRyZXNzIHJlcXVpcmVtZW50c1xuICogQGNhdGVnb3J5IENvcmVcbiAqIEBwYXJhbSB7c3RyaW5nfVxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0FsZ29yYW5kQWRkcmVzcyhpbnB1dDogc3RyaW5nKSB7XG4gIHJldHVybiBhbGdvQWRkcmVzcy50ZXN0KGlucHV0KTtcbn1cblxuLyoqXG4gKiBUZXN0IGZvciBhIHZhbGlkIEFsZ29yYW5kIHRyYW5zYWN0aW9uIElEXG4gKiBAY2F0ZWdvcnkgQ29yZVxuICogQHBhcmFtIHtzdHJpbmd9XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzVHJhbnNhY3Rpb25JZCh0eElkOiBzdHJpbmcpIHtcbiAgcmV0dXJuIGFsZ29UeG4udGVzdCh0eElkKTtcbn1cblxuLyoqXG4gKiBUZXN0IGZvciBhIHZhbGlkIEFsZ29yYW5kIGFzc2V0IGluZGV4XG4gKiBAY2F0ZWdvcnkgQ29yZVxuICogQHBhcmFtIHtudW1iZXJ9XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzQXNzZXRJbmRleChhc3NldElkOiBudW1iZXIpIHtcbiAgcmV0dXJuIGFzc2V0SW5kZXgudGVzdChhc3NldElkKTtcbn1cblxuLyoqXG4gKiBUZXN0IGZvciBiYXNpYyB2YWxpZCBBbGdvcmFuZCB0cmFuc2FjdGlvbiBwYXlsb2FkIHNoYXBlXG4gKiBAY2F0ZWdvcnkgQ29yZVxuICogQHBhcmFtIHtvYmplY3R9XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzVHJhbnNhY3Rpb25QYXlsb2FkKHR4blBheWxvYWQ6IG9iamVjdCkge1xuICBjb25zdCBpc1R4biA9IHY4bigpLnNjaGVtYSh7XG4gICAgdHhuOiB2OG4oKS5vYmplY3QoKVxuICB9KTtcbiAgcmV0dXJuIGlzVHhuLnRlc3QodHhuUGF5bG9hZCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgYXNzZXRJbmRleCxcbiAgYWxnb0FkZHJlc3MsXG4gIGFsZ29UeG4sXG4gIGFzc2V0Q3JlYXRlUGFyYW1zLFxuICBhc3NldENvbmZpZ3VyZVBhcmFtcyxcbiAgaXNBbGdvcmFuZEFkZHJlc3MsXG4gIGlzVHJhbnNhY3Rpb25JZCxcbiAgaXNBc3NldEluZGV4LFxuICBpc1RyYW5zYWN0aW9uUGF5bG9hZFxufTtcbiJdfQ==