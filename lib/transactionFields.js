"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.transactionSender = transactionSender;
exports.transactionFee = transactionFee;
exports.firstValidRound = firstValidRound;
exports.lastValidRound = lastValidRound;
exports.transactionNote = transactionNote;
exports.transactionGenesisId = transactionGenesisId;
exports.transactionGenesisHash = transactionGenesisHash;
exports.transactionGroup = transactionGroup;
exports.transactionType = transactionType;
exports.transactionReceiver = transactionReceiver;
exports.transactionAmount = transactionAmount;
exports.closeRemainderTo = closeRemainderTo;
exports["default"] = void 0;

var _v8n = _interopRequireDefault(require("v8n"));

var _extensions = require("./utils/extensions");

var _core = require("./core");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

// For full typing support on the extend function,
// v8n should use context instead of a global variable
// Details: https://github.com/imbrn/v8n/issues/28
// @ts-ignore
_v8n["default"].extend({
  exactByteLength: _extensions.exactByteLength,
  maxByteLength: _extensions.maxByteLength
});
/**
 * Test sender field for a valid Algorand address
 * @category All Transactions
 * @param {string}
 * @returns {boolean}
 */


function transactionSender(senderAddr) {
  return _core.algoAddress.test(senderAddr);
}
/**
 * Test for a valid transaction fee
 * @category All Transactions
 * @param {number}
 * @returns {boolean}
 */


function transactionFee(txnFee) {
  return (0, _v8n["default"])().number().positive().greaterThanOrEqual(1000).lessThanOrEqual(Number.MAX_SAFE_INTEGER).test(txnFee);
}
/**
 * Test for a valid first round
 * @category All Transactions
 * @param {number}
 * @returns {boolean}
 */


function firstValidRound(firstValid) {
  return (0, _v8n["default"])().number().positive().lessThanOrEqual(Number.MAX_SAFE_INTEGER).test(firstValid);
}
/**
 * Test for a valid first round
 * @category All Transactions
 * @param {number}
 * @returns {boolean}
 */


function lastValidRound(lastValid) {
  return (0, _v8n["default"])().number().positive().lessThanOrEqual(Number.MAX_SAFE_INTEGER).test(lastValid);
}
/**
 * Test for a valid note field
 * @category All Transactions
 * @param {string}
 * @returns {boolean}
 */


function transactionNote(note) {
  return (0, _v8n["default"])().string().maxByteLength(1000).test(note);
}
/**
 * Test for a valid genesis id
 * @category All Transactions
 * @param {string}
 * @returns {boolean}
 */


function transactionGenesisId(genesisId) {
  return (0, _v8n["default"])().string().test(genesisId);
}
/**
 * Test for a valid genesis hash
 * @category All Transactions
 * @param {string}
 * @returns {boolean}
 */


function transactionGenesisHash(genesisHash) {
  return (0, _v8n["default"])().string().test(genesisHash);
}
/**
 * Test for a valid group
 * @category All Transactions
 * @param {string}
 * @returns {boolean}
 */


function transactionGroup(genesisHash) {
  return (0, _v8n["default"])().string().test(genesisHash);
}
/**
 * Test for a valid transaction type
 * @category All Transactions
 * @param {string}
 * @returns {boolean}
 */


function transactionType(type) {
  return (0, _v8n["default"])().string().test(type);
}
/**
 * Test for a valid transaction receiver account
 * @category Payment Transactions
 * @param {string}
 * @returns {boolean}
 */


function transactionReceiver(receiverAddr) {
  return _core.algoAddress.test(receiverAddr);
}
/**
 * Test for a valid algo amount to be sent
 * @category Payment Transactions
 * @param {number}
 * @returns {boolean}
 */


function transactionAmount(txnAmount) {
  return (0, _v8n["default"])().number().positive().lessThanOrEqual(Number.MAX_SAFE_INTEGER).test(txnAmount);
}
/**
 * Test for a valid algo amount to be sent
 * @category Payment Transactions
 * @param {number}
 * @returns {boolean}
 */


function closeRemainderTo(address) {
  return _core.algoAddress.test(address);
}

var _default = {
  transactionSender: transactionSender,
  transactionFee: transactionFee,
  firstValidRound: firstValidRound,
  lastValidRound: lastValidRound,
  transactionNote: transactionNote,
  transactionGenesisId: transactionGenesisId,
  transactionGenesisHash: transactionGenesisHash,
  transactionGroup: transactionGroup,
  transactionType: transactionType,
  transactionReceiver: transactionReceiver,
  transactionAmount: transactionAmount,
  closeRemainderTo: closeRemainderTo
};
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,