"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isUint8Array = exports.base32CharsOnly = exports.minByteLength = exports.maxByteLength = exports.exactByteLength = void 0;

var _fastestsmallesttextencoderdecoder = require("fastestsmallesttextencoderdecoder");

var exactByteLength = function exactByteLength(validLength) {
  return function (val) {
    return new _fastestsmallesttextencoderdecoder.TextEncoder().encode(val).length === validLength;
  };
};

exports.exactByteLength = exactByteLength;

var maxByteLength = function maxByteLength(maxLength) {
  return function (val) {
    return new _fastestsmallesttextencoderdecoder.TextEncoder().encode(val).length <= maxLength;
  };
};

exports.maxByteLength = maxByteLength;

var minByteLength = function minByteLength(minLength) {
  return function (val) {
    return new _fastestsmallesttextencoderdecoder.TextEncoder().encode(val).length >= minLength;
  };
};

exports.minByteLength = minByteLength;

var base32CharsOnly = function base32CharsOnly() {
  return function (val) {
    // Algorand strips off padding and doesn't adhere to multiples of 8 length constraint
    var b32_regex = new RegExp(/^[A-Z2-7]*$/);
    return b32_regex.test(val);
  };
};

exports.base32CharsOnly = base32CharsOnly;

var isUint8Array = function isUint8Array() {
  return function (val) {
    return val.constructor === Uint8Array;
  };
};

exports.isUint8Array = isUint8Array;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9leHRlbnNpb25zLnRzIl0sIm5hbWVzIjpbImV4YWN0Qnl0ZUxlbmd0aCIsInZhbGlkTGVuZ3RoIiwidmFsIiwiVGV4dEVuY29kZXIiLCJlbmNvZGUiLCJsZW5ndGgiLCJtYXhCeXRlTGVuZ3RoIiwibWF4TGVuZ3RoIiwibWluQnl0ZUxlbmd0aCIsIm1pbkxlbmd0aCIsImJhc2UzMkNoYXJzT25seSIsImIzMl9yZWdleCIsIlJlZ0V4cCIsInRlc3QiLCJpc1VpbnQ4QXJyYXkiLCJjb25zdHJ1Y3RvciIsIlVpbnQ4QXJyYXkiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7QUFFTyxJQUFNQSxlQUFlLEdBQUcsU0FBbEJBLGVBQWtCLENBQUNDLFdBQUQ7QUFBQSxTQUF5QixVQUFDQyxHQUFEO0FBQUEsV0FDdEQsSUFBSUMsOENBQUosR0FBa0JDLE1BQWxCLENBQXlCRixHQUF6QixFQUE4QkcsTUFBOUIsS0FBeUNKLFdBRGE7QUFBQSxHQUF6QjtBQUFBLENBQXhCOzs7O0FBR0EsSUFBTUssYUFBYSxHQUFHLFNBQWhCQSxhQUFnQixDQUFDQyxTQUFEO0FBQUEsU0FBdUIsVUFBQ0wsR0FBRDtBQUFBLFdBQ2xELElBQUlDLDhDQUFKLEdBQWtCQyxNQUFsQixDQUF5QkYsR0FBekIsRUFBOEJHLE1BQTlCLElBQXdDRSxTQURVO0FBQUEsR0FBdkI7QUFBQSxDQUF0Qjs7OztBQUdBLElBQU1DLGFBQWEsR0FBRyxTQUFoQkEsYUFBZ0IsQ0FBQ0MsU0FBRDtBQUFBLFNBQXVCLFVBQUNQLEdBQUQ7QUFBQSxXQUNsRCxJQUFJQyw4Q0FBSixHQUFrQkMsTUFBbEIsQ0FBeUJGLEdBQXpCLEVBQThCRyxNQUE5QixJQUF3Q0ksU0FEVTtBQUFBLEdBQXZCO0FBQUEsQ0FBdEI7Ozs7QUFHQSxJQUFNQyxlQUFlLEdBQUcsU0FBbEJBLGVBQWtCO0FBQUEsU0FBTSxVQUFDUixHQUFELEVBQWlCO0FBQ3BEO0FBQ0EsUUFBTVMsU0FBUyxHQUFHLElBQUlDLE1BQUosQ0FBVyxhQUFYLENBQWxCO0FBQ0EsV0FBT0QsU0FBUyxDQUFDRSxJQUFWLENBQWVYLEdBQWYsQ0FBUDtBQUNELEdBSjhCO0FBQUEsQ0FBeEI7Ozs7QUFNQSxJQUFNWSxZQUFZLEdBQUcsU0FBZkEsWUFBZTtBQUFBLFNBQU0sVUFBQ1osR0FBRCxFQUFxQjtBQUNyRCxXQUFPQSxHQUFHLENBQUNhLFdBQUosS0FBb0JDLFVBQTNCO0FBQ0QsR0FGMkI7QUFBQSxDQUFyQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFRleHRFbmNvZGVyIH0gZnJvbSAnZmFzdGVzdHNtYWxsZXN0dGV4dGVuY29kZXJkZWNvZGVyJztcblxuZXhwb3J0IGNvbnN0IGV4YWN0Qnl0ZUxlbmd0aCA9ICh2YWxpZExlbmd0aDogbnVtYmVyKSA9PiAodmFsOiBzdHJpbmcpID0+XG4gIG5ldyBUZXh0RW5jb2RlcigpLmVuY29kZSh2YWwpLmxlbmd0aCA9PT0gdmFsaWRMZW5ndGg7XG5cbmV4cG9ydCBjb25zdCBtYXhCeXRlTGVuZ3RoID0gKG1heExlbmd0aDogbnVtYmVyKSA9PiAodmFsOiBzdHJpbmcpID0+XG4gIG5ldyBUZXh0RW5jb2RlcigpLmVuY29kZSh2YWwpLmxlbmd0aCA8PSBtYXhMZW5ndGg7XG5cbmV4cG9ydCBjb25zdCBtaW5CeXRlTGVuZ3RoID0gKG1pbkxlbmd0aDogbnVtYmVyKSA9PiAodmFsOiBzdHJpbmcpID0+XG4gIG5ldyBUZXh0RW5jb2RlcigpLmVuY29kZSh2YWwpLmxlbmd0aCA+PSBtaW5MZW5ndGg7XG5cbmV4cG9ydCBjb25zdCBiYXNlMzJDaGFyc09ubHkgPSAoKSA9PiAodmFsOiBzdHJpbmcpID0+IHtcbiAgLy8gQWxnb3JhbmQgc3RyaXBzIG9mZiBwYWRkaW5nIGFuZCBkb2Vzbid0IGFkaGVyZSB0byBtdWx0aXBsZXMgb2YgOCBsZW5ndGggY29uc3RyYWludFxuICBjb25zdCBiMzJfcmVnZXggPSBuZXcgUmVnRXhwKC9eW0EtWjItN10qJC8pO1xuICByZXR1cm4gYjMyX3JlZ2V4LnRlc3QodmFsKTtcbn07XG5cbmV4cG9ydCBjb25zdCBpc1VpbnQ4QXJyYXkgPSAoKSA9PiAodmFsOiBVaW50OEFycmF5KSA9PiB7XG4gIHJldHVybiB2YWwuY29uc3RydWN0b3IgPT09IFVpbnQ4QXJyYXk7XG59O1xuIl19