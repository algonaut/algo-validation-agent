export declare const ALGORAND_ADDRESS_LENGTH = 58;
export declare const ALGORAND_TRANSACTION_LENGTH = 52;
export declare const VALID_ALGORAND_TRANSACTION = "JNIN7CQCXOC3OYKPDNP7IQW6HOL5UN4EP47OXSDKK6TY3E55Y2VA";
export declare const VALID_ALGORAND_ADDRESS = "CINCNAPB2RLDUCS3EVDLURZZD742TMWRQEZ4CBEWF2QMOYXMH6RWRZEIEA";
export declare const BASE32_RFC_4648_ALPHABET = "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567";
export declare const MAINNET_GENESIS_ID = "mainnet-v1.0";
export declare const TESTNET_GENESIS_ID = "testnet-v1.0";
export declare const BETANET_GENESIS_ID = "betanet-v1.0";
export declare const MAINNET_GENESIS_HASH = "wGHE2Pwdvd7S12BL5FaOP20EGYesN73ktiC1qzkkit8=";
export declare const TESTNET_GENESIS_HASH = "SGO1GKSzyE7IEPItTxCByw9x8FmnrCDexi9/cOUJOiI=";
export declare const BETANET_GENESIS_HASH = "mFgazF+2uRS1tMiL9dsj01hJGySEmPN28B/TjjvpVW0=";
export declare const TRANSACTION_TYPES: {
    PAY: string;
    KEYREG: string;
    ACFG: string;
    AXFER: string;
    AFRZ: string;
};
export declare const VALID_PAY_TRANSACTION: {
    amount: number;
    fee: number;
    firstRound: number;
    genesisID: string;
    genesisHash: string;
    lastRound: number;
    note: string;
    to: string;
    from: string;
    type: string;
};
export declare const INVALID_ROUND_TRANSACTION: {
    amount: number;
    fee: number;
    firstRound: number;
    lastRound: number;
    genesisID: string;
    genesisHash: string;
    note: string;
    to: string;
    from: string;
    type: string;
};
export declare const VALID_CLOSE_TRANSACTION: {
    closeRemainderTo: string;
    fee: number;
    firstRound: number;
    genesisID: string;
    genesisHash: string;
    lastRound: number;
    to: string;
    from: string;
    type: string;
};
export declare const REGISTER_KEY_ONLINE_TRANSACTION: {
    fee: number;
    firstRound: number;
    genesisHash: string;
    lastRound: number;
    selectionKey: string;
    from: string;
    type: string;
    voteFirst: number;
    voteKeyDilution: number;
    voteKey: string;
    voteLast: number;
};
export declare const REGISTER_KEY_OFFLINE_TRANSACTION: {
    fee: number;
    firstRound: number;
    genesisHash: string;
    lastRound: number;
    from: string;
    type: string;
};
export declare const CREATE_ASSET_TRANSACTION: {
    assetMetadataHash: string;
    assetName: string;
    assetURL: string;
    assetClawback: string;
    assetDecimals: number;
    assetFreeze: string;
    assetManager: string;
    assetReserve: string;
    assetTotal: number;
    assetUnitName: string;
    fee: number;
    firstRound: number;
    genesisHash: string;
    lastRound: number;
    from: string;
    type: string;
};
export declare const CONFIGURE_ASSET_TRANSACTION: {
    assetClawback: string;
    assetFreeze: string;
    assetManager: string;
    assetReserve: string;
    assetIndex: number;
    fee: number;
    firstRound: number;
    genesisHash: string;
    lastRound: number;
    from: string;
    type: string;
};
export declare const DESTROY_ASSET_TRANSACTION: {
    assetIndex: number;
    fee: number;
    firstRound: number;
    genesisHash: string;
    lastRound: number;
    from: string;
    type: string;
};
export declare const OPT_IN_ASSET_TRANSACTION: {
    to: string;
    fee: number;
    firstRound: number;
    genesisHash: string;
    lastRound: number;
    from: string;
    type: string;
    assetIndex: number;
};
export declare const TRANSFER_ASSET_TRANSACTION: {
    amount: number;
    to: string;
    fee: number;
    firstRound: number;
    genesisHash: string;
    lastRound: number;
    from: string;
    type: string;
    assetIndex: number;
};
export declare const REVOKE_ASSET_TRANSACTION: {
    amount: number;
    to: string;
    assetRevocationTarget: string;
    fee: number;
    firstRound: number;
    genesisHash: string;
    lastRound: number;
    from: string;
    type: string;
    assetIndex: number;
};
export declare const FREEZE_ASSET_TRANSACTION: {
    freezeState: boolean;
    freezeAccount: string;
    assetIndex: number;
    fee: number;
    firstRound: number;
    genesisHash: string;
    lastRound: number;
    from: string;
    type: string;
};
