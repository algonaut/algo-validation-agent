"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.assetId = assetId;
exports.assetName = assetName;
exports.unitName = unitName;
exports.assetDecimalPlaces = assetDecimalPlaces;
exports.defaultFrozen = defaultFrozen;
exports.assetTotalIssuance = assetTotalIssuance;
exports.assetUrl = assetUrl;
exports.assetMetadataHash = assetMetadataHash;
exports["default"] = void 0;

var _v8n = _interopRequireDefault(require("v8n"));

var _custom = require("./custom");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

// For full typing support on the extend function,
// v8n should use context instead of a global variable
// Details: https://github.com/imbrn/v8n/issues/28
// @ts-ignore
_v8n["default"].extend({
  byteLength: _custom.byteLength
});

function assetId(assetId) {
  return (0, _v8n["default"])().number().test(assetId);
}

function assetName(assetName) {
  return (0, _v8n["default"])().string().between(1, 32).test(assetName);
}

function unitName(unitName) {
  return (0, _v8n["default"])().string().between(1, 8).test(unitName);
}

function assetDecimalPlaces(decimals) {
  return (0, _v8n["default"])().integer().between(0, 19).test(decimals);
}

function defaultFrozen(isFrozen) {
  return (0, _v8n["default"])()["boolean"]().test(isFrozen);
}

function assetTotalIssuance(total) {
  // Max safe integer?
  return (0, _v8n["default"])().integer().between(1, Number.MAX_SAFE_INTEGER).test(total);
}

function assetUrl(url) {
  // Length?
  return (0, _v8n["default"])().string().test(url);
}

function assetMetadataHash(hash) {
  // Length?
  // Encoding?
  return (0, _v8n["default"])().string().length(32).test(hash);
}

var _default = {
  assetId: assetId,
  assetName: assetName,
  unitName: unitName,
  assetDecimalPlaces: assetDecimalPlaces,
  defaultFrozen: defaultFrozen,
  assetTotalIssuance: assetTotalIssuance,
  assetUrl: assetUrl,
  assetMetadataHash: assetMetadataHash
};
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9hc3NldHMudHMiXSwibmFtZXMiOlsidjhuIiwiZXh0ZW5kIiwiYnl0ZUxlbmd0aCIsImFzc2V0SWQiLCJudW1iZXIiLCJ0ZXN0IiwiYXNzZXROYW1lIiwic3RyaW5nIiwiYmV0d2VlbiIsInVuaXROYW1lIiwiYXNzZXREZWNpbWFsUGxhY2VzIiwiZGVjaW1hbHMiLCJpbnRlZ2VyIiwiZGVmYXVsdEZyb3plbiIsImlzRnJvemVuIiwiYXNzZXRUb3RhbElzc3VhbmNlIiwidG90YWwiLCJOdW1iZXIiLCJNQVhfU0FGRV9JTlRFR0VSIiwiYXNzZXRVcmwiLCJ1cmwiLCJhc3NldE1ldGFkYXRhSGFzaCIsImhhc2giLCJsZW5ndGgiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztBQUFBOztBQUNBOzs7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQUEsZ0JBQUlDLE1BQUosQ0FBVztBQUFFQyxFQUFBQSxVQUFVLEVBQVZBO0FBQUYsQ0FBWDs7QUFFTyxTQUFTQyxPQUFULENBQWlCQSxPQUFqQixFQUFrQztBQUN2QyxTQUFPLHVCQUNKQyxNQURJLEdBRUpDLElBRkksQ0FFQ0YsT0FGRCxDQUFQO0FBR0Q7O0FBRU0sU0FBU0csU0FBVCxDQUFtQkEsU0FBbkIsRUFBc0M7QUFDM0MsU0FBTyx1QkFDSkMsTUFESSxHQUVKQyxPQUZJLENBRUksQ0FGSixFQUVPLEVBRlAsRUFHSkgsSUFISSxDQUdDQyxTQUhELENBQVA7QUFJRDs7QUFFTSxTQUFTRyxRQUFULENBQWtCQSxRQUFsQixFQUFvQztBQUN6QyxTQUFPLHVCQUNKRixNQURJLEdBRUpDLE9BRkksQ0FFSSxDQUZKLEVBRU8sQ0FGUCxFQUdKSCxJQUhJLENBR0NJLFFBSEQsQ0FBUDtBQUlEOztBQUVNLFNBQVNDLGtCQUFULENBQTRCQyxRQUE1QixFQUE4QztBQUNuRCxTQUFPLHVCQUNKQyxPQURJLEdBRUpKLE9BRkksQ0FFSSxDQUZKLEVBRU8sRUFGUCxFQUdKSCxJQUhJLENBR0NNLFFBSEQsQ0FBUDtBQUlEOztBQUVNLFNBQVNFLGFBQVQsQ0FBdUJDLFFBQXZCLEVBQTBDO0FBQy9DLFNBQU8sb0NBRUpULElBRkksQ0FFQ1MsUUFGRCxDQUFQO0FBR0Q7O0FBRU0sU0FBU0Msa0JBQVQsQ0FBNEJDLEtBQTVCLEVBQTJDO0FBQ2hEO0FBQ0EsU0FBTyx1QkFDSkosT0FESSxHQUVKSixPQUZJLENBRUksQ0FGSixFQUVPUyxNQUFNLENBQUNDLGdCQUZkLEVBR0piLElBSEksQ0FHQ1csS0FIRCxDQUFQO0FBSUQ7O0FBRU0sU0FBU0csUUFBVCxDQUFrQkMsR0FBbEIsRUFBK0I7QUFDcEM7QUFDQSxTQUFPLHVCQUNKYixNQURJLEdBRUpGLElBRkksQ0FFQ2UsR0FGRCxDQUFQO0FBR0Q7O0FBRU0sU0FBU0MsaUJBQVQsQ0FBMkJDLElBQTNCLEVBQXlDO0FBQzlDO0FBQ0E7QUFDQSxTQUFPLHVCQUNKZixNQURJLEdBRUpnQixNQUZJLENBRUcsRUFGSCxFQUdKbEIsSUFISSxDQUdDaUIsSUFIRCxDQUFQO0FBSUQ7O2VBRWM7QUFDYm5CLEVBQUFBLE9BQU8sRUFBUEEsT0FEYTtBQUViRyxFQUFBQSxTQUFTLEVBQVRBLFNBRmE7QUFHYkcsRUFBQUEsUUFBUSxFQUFSQSxRQUhhO0FBSWJDLEVBQUFBLGtCQUFrQixFQUFsQkEsa0JBSmE7QUFLYkcsRUFBQUEsYUFBYSxFQUFiQSxhQUxhO0FBTWJFLEVBQUFBLGtCQUFrQixFQUFsQkEsa0JBTmE7QUFPYkksRUFBQUEsUUFBUSxFQUFSQSxRQVBhO0FBUWJFLEVBQUFBLGlCQUFpQixFQUFqQkE7QUFSYSxDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHY4biBmcm9tICd2OG4nO1xuaW1wb3J0IHsgYnl0ZUxlbmd0aCB9IGZyb20gJy4vY3VzdG9tJztcblxuLy8gRm9yIGZ1bGwgdHlwaW5nIHN1cHBvcnQgb24gdGhlIGV4dGVuZCBmdW5jdGlvbixcbi8vIHY4biBzaG91bGQgdXNlIGNvbnRleHQgaW5zdGVhZCBvZiBhIGdsb2JhbCB2YXJpYWJsZVxuLy8gRGV0YWlsczogaHR0cHM6Ly9naXRodWIuY29tL2ltYnJuL3Y4bi9pc3N1ZXMvMjhcbi8vIEB0cy1pZ25vcmVcbnY4bi5leHRlbmQoeyBieXRlTGVuZ3RoIH0pO1xuXG5leHBvcnQgZnVuY3Rpb24gYXNzZXRJZChhc3NldElkOiBudW1iZXIpIHtcbiAgcmV0dXJuIHY4bigpXG4gICAgLm51bWJlcigpXG4gICAgLnRlc3QoYXNzZXRJZCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhc3NldE5hbWUoYXNzZXROYW1lOiBzdHJpbmcpIHtcbiAgcmV0dXJuIHY4bigpXG4gICAgLnN0cmluZygpXG4gICAgLmJldHdlZW4oMSwgMzIpXG4gICAgLnRlc3QoYXNzZXROYW1lKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVuaXROYW1lKHVuaXROYW1lOiBzdHJpbmcpIHtcbiAgcmV0dXJuIHY4bigpXG4gICAgLnN0cmluZygpXG4gICAgLmJldHdlZW4oMSwgOClcbiAgICAudGVzdCh1bml0TmFtZSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhc3NldERlY2ltYWxQbGFjZXMoZGVjaW1hbHM6IHN0cmluZykge1xuICByZXR1cm4gdjhuKClcbiAgICAuaW50ZWdlcigpXG4gICAgLmJldHdlZW4oMCwgMTkpXG4gICAgLnRlc3QoZGVjaW1hbHMpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZGVmYXVsdEZyb3plbihpc0Zyb3plbjogYm9vbGVhbikge1xuICByZXR1cm4gdjhuKClcbiAgICAuYm9vbGVhbigpXG4gICAgLnRlc3QoaXNGcm96ZW4pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYXNzZXRUb3RhbElzc3VhbmNlKHRvdGFsOiBudW1iZXIpIHtcbiAgLy8gTWF4IHNhZmUgaW50ZWdlcj9cbiAgcmV0dXJuIHY4bigpXG4gICAgLmludGVnZXIoKVxuICAgIC5iZXR3ZWVuKDEsIE51bWJlci5NQVhfU0FGRV9JTlRFR0VSKVxuICAgIC50ZXN0KHRvdGFsKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFzc2V0VXJsKHVybDogc3RyaW5nKSB7XG4gIC8vIExlbmd0aD9cbiAgcmV0dXJuIHY4bigpXG4gICAgLnN0cmluZygpXG4gICAgLnRlc3QodXJsKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFzc2V0TWV0YWRhdGFIYXNoKGhhc2g6IHN0cmluZykge1xuICAvLyBMZW5ndGg/XG4gIC8vIEVuY29kaW5nP1xuICByZXR1cm4gdjhuKClcbiAgICAuc3RyaW5nKClcbiAgICAubGVuZ3RoKDMyKVxuICAgIC50ZXN0KGhhc2gpO1xufVxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGFzc2V0SWQsXG4gIGFzc2V0TmFtZSxcbiAgdW5pdE5hbWUsXG4gIGFzc2V0RGVjaW1hbFBsYWNlcyxcbiAgZGVmYXVsdEZyb3plbixcbiAgYXNzZXRUb3RhbElzc3VhbmNlLFxuICBhc3NldFVybCxcbiAgYXNzZXRNZXRhZGF0YUhhc2hcbn07XG4iXX0=